One, two, three
[...] This article now has a sequel: Signs that you're a good programmer.Why was this written?Most of these faults were discovered the hard way by the author himself, either because he committed them himself or saw them in the work of others.This paper is not meant for grading programmers, it was intended to be read by programmers who trust their ability to judge when something is a sign of bad practice, and when it's a consequence of special circumstances.This paper was written to force its author to think, and published because he thinks you lot would probably get a kick out of it, too.1. In Visual Studio, for example, this means setting a breakpoint at the beginning of the problem area and stepping through with the 'F11' key, inspecting the value of variables--before and after they change--until you understand what the code is doing. If the target environment doesn't have such a feature, then do your practice-work in one that does.The goal is to reach a point where you no longer need the debugger to be able to follow the flow of code in your head, and where you are patient enough to think about what the code is doing to the state of the program. [...] But I did know which room his acquaintance, Frank, was staying in. [...] Frank didn't know, but he did know which room Joe's co-worker, Theodore, was staying in, and gave me that room number instead. [...] And that, in fact, is where Joe was. [...] The above is a simple analogy for a linked list, and anybody can invent their own, even if they aren't programmers. [...] Stop coding even if you have the feeling that it's not enough, and run it anyway. [...] If neither, then this condition is similar to the inability to reason about code, but it seems that it isn't reasoning that's impaired, but trust and comfort with the language. Some of the symptoms are more like "comfort code" that doesn't survive logical analysis, but that the programmer felt compelled to write anyway.